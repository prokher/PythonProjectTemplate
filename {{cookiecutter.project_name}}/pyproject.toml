# Python project configuration.

# File format is STANDARDIZED in the PEP 518:
# https://www.python.org/dev/peps/pep-0518/


# --------------------------------------------------------- BUILD-SYSTEM
[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

# --------------------------------------------------------------- POETRY
# Python packaging and dependency management.
# Docs: https://python-poetry.org/docs/
[tool.poetry]
# The project description you will see in the PyPI.
name = "{{cookiecutter.pypi_project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.full_name}}"]
homepage = "{{cookiecutter.pypi_homepage}}"
repository = "{{cookiecutter.pypi_repository}}"
# List of licenses: https://python-poetry.org/docs/pyproject/#license
license = "{{cookiecutter.license}}"
# Files and directories to include into the package.
packages = [
    { include = "{{cookiecutter.root_python_package}}/" },
]
[tool.poetry.dependencies]
# Production dependencies. Python packages installed when this package
# installs, e.g. on `pip install {{cookiecutter.pypi_project_name}}`.
# Version syntax: https://python-poetry.org/docs/versions/
invoke = ">=1.4.1"
python = ">=3.6.1, <4"
[tool.poetry.dev-dependencies]
# Development dependencies. Python packages needed for development.
# Installed when you run `poetry install`.
# Version syntax: https://python-poetry.org/docs/versions/
black = { version = ">=19.10b0", allow-prereleases = true }
cookiecutter = ">=1.7.0"
coverage = ">=5.0.4"
ipython = "*"
isort = {version = ">=4.3.21", extras = ["pyproject"]}
mypy = ">=0.770"
plumbum = ">=1.6.9"
pre-commit = ">=2.2.0"
pydocstyle = ">=5.0.2"
pylint = ">=2.5.0"
pylint-quotes = ">=0.2.1"
pytest = ">=5.4.1"
pytest-asyncio = ">=0.10.0"
pytest-cookies = ">=0.5.1"
pytest-cov = ">=2.8.1"
pytest-pythonpath = ">=0.7.3"
tox = ">=3.14.6"

# ---------------------------------------------------------------- ISORT
# Isort configuration.
# Docs: https://github.com/timothycrosley/isort/wiki/isort-Settings
[tool.isort]
profile="black"

# --------------------------------------------------------------- PYLINT
# Pylint code checker configuration.
# - Pylint docs:
#   https://pylint.readthedocs.io/en/latest/
# - Configuration reference:
#   http://pylint.pycqa.org/en/latest/technical_reference/features.html
[tool.pylint.MASTER]
# Work in parallel.
jobs = "0"
load-plugins = "pylint_quotes"
# Do not store results of previous runs.
persistent = "no"
# Allow to load C extension modules.
unsafe-load-any-extension = "yes"
[tool.pylint."MESSAGES CONTROL"]
# bad-continuation: Black does the job, no need to check.
# design: Do not count lines, members, ..., no use.
# similarities: Duplication does not mean bad design by itself.
disable = "bad-continuation,design,similarities"
enable = "c-extension-no-member"
[tool.pylint.BASIC]
# It is OK to have 2-letters identifiers, e.g. 'id' or 'ok'. Also allow
# long identifiers, cause there is a strong line length limitation which
# will force engineers to thing twice before giving too long names.
argument-rgx = "[a-z_][a-z0-9_]{1,64}$"
attr-rgx = "[a-z_][a-z0-9_]{1,64}$"
bad-names = "foo,bar,baz,toto,tutu,tata,responce,pathes"
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{1,64}|(__.*__))$"
function-rgx = "[a-z_][a-z0-9_]{1,64}$"
good-names = "i,j,k,ex,Run,_"
method-rgx = "[a-z_][a-z0-9_]{1,64}$"
# Docstrings are needed everywhere.
no-docstring-rgx = "^$"
variable-rgx = "[a-z_][a-z0-9_]{1,64}$"
[tool.pylint.FORMAT]
max-line-length="88"
max-module-lines="9000" # Right, over nine thousand!
[tool.pylint.STRING_QUOTES]
docstring-quote = "double"
string-quote = "double-avoid-escape"
triple-quote = "double"
[tool.pylint.REFACTORING]
# We have line length 88, no need to check.
max-nested-blocks = "9000"
[tool.pylint.REPORTS]
reports = "no"
score = "no"

# ------------------------------------------------------------- COVERAGE
# Coverage.py configuration reference:
# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
# List of packages to measure coverage in.
source = ["{{cookiecutter.root_python_package}}/"]
# Do not include test files in the coverage report.
omit = ["**/test_*.py"]

# ------------------------------------------------------------------ TOX
# Tox configuration following Poetry FAQ instructions:
# https://python-poetry.org/docs/faq/#is-tox-supported
# At the moment of writing Tox only supports `pyproject.toml`-based
# configuration though this `legacy_tox_ini` option:
# https://tox.readthedocs.io/en/latest/example/basic.html#pyproject-toml-tox-legacy-ini
[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py36,py37,py38
[testenv]
whitelist_externals = poetry
commands =
    poetry install -v
    poetry run pytest
"""
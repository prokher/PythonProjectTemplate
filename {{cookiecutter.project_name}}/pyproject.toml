# Python project configuration.

# File format is STANDARDIZED in the PEP 518:
# https://www.python.org/dev/peps/pep-0518/


# --------------------------------------------------------- BUILD-SYSTEM
[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

# --------------------------------------------------------------- POETRY
# Python packaging and dependency management.
# Docs: https://python-poetry.org/docs/
[tool.poetry]
# The project description you will see in the PyPI.
name = "{{cookiecutter.pypi_project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.full_name}}"]
homepage = "{{cookiecutter.pypi_homepage}}"
repository = "{{cookiecutter.pypi_repository}}"
# List of licenses: https://python-poetry.org/docs/pyproject/#license
license = "{{cookiecutter.license}}"
# Files and directories to include into the package.
packages = [
    { include = "{{cookiecutter.root_python_package}}/" },
]
[tool.poetry.dependencies]
# Production dependencies. Python packages installed when this package
# installs, e.g. on `pip install {{cookiecutter.pypi_project_name}}`.
# Version syntax: https://python-poetry.org/docs/versions/
python = ">=3.6.1, <4"
[tool.poetry.dev-dependencies]
# Development dependencies. Python packages needed for development.
# Installed when you run `poetry install`.
# Version syntax: https://python-poetry.org/docs/versions/
black = { version = ">=19.10b0", allow-prereleases = true }
cookiecutter = ">=1.7.0"
coverage = ">=5.0.4"
ipython = "*"
isort = {version = ">=4.3.21", extras = ["pyproject"]}
mypy = ">=0.770"
plumbum = ">=1.6.9"
pre-commit = ">=2.2.0"
pydocstyle = ">=5.0.2"
pylint = ">=2.4.4"
pylint-quotes = ">=0.2.1"
pytest = ">=5.4.1"
pytest-asyncio = ">=0.10.0"
pytest-cookies = ">=0.5.1"
pytest-cov = ">=2.8.1"
pytest-pythonpath = ">=0.7.3"
tox = ">=3.14.6"

# ---------------------------------------------------------------- ISORT
# Isort configuration.
# - Docs: https://github.com/timothycrosley/isort/wiki/isort-Settings
# - Tune Isort to correspond to the Black style guide:
#   https://black.readthedocs.io/en/stable/the_black_code_style.html
#
# NOTE: Isort treats paths relative to the current working directory, so
# if you run it not from the directory `.venv` resides it will not be
# able to properly detect thirdparty modules. Here is the bug report:
# https://github.com/timothycrosley/isort/issues/659. Current workaround
# is to provide `--virtual-env` from the command line.
[tool.isort]
balanced_wrapping = "True"
combine_as_imports = "True"
default_section = "FIRSTPARTY"
force_grid_wrap = 0
force_sort_within_sections = "True"
force_to_top = "True"
include_trailing_comma = "True"
line_length = 88
lines_after_imports = 2
multi_line_output = 3
not_skip = "__init__.py"
skip_glob = [".venv"]
use_parentheses = "True"
virtual_env = "./.venv/"

# ------------------------------------------------------------- COVERAGE
# Coverage.py configuration reference:
# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
# List of packages to measure coverage in.
source = ["{{cookiecutter.root_python_package}}/"]
# Do not include test files in the coverage report.
omit = ["**/test_*.py"]

# ------------------------------------------------------------------ TOX
# Tox configuration following Poetry FAQ instructions:
# https://python-poetry.org/docs/faq/#is-tox-supported
# At the moment of writing Tox only supports `pyproject.toml`-based
# configuration though this `legacy_tox_ini` option:
# https://tox.readthedocs.io/en/latest/example/basic.html#pyproject-toml-tox-legacy-ini
[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py36,py37,py38
[testenv]
whitelist_externals = poetry
commands =
    poetry install -v
    poetry run pytest
"""